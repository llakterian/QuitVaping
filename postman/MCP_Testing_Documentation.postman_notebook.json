{
  "cells": [
    {
      "kind": 1,
      "language": "markdown",
      "value": "# MCP Server Testing and Monitoring Documentation\n\nThis comprehensive notebook documents the complete testing and monitoring setup for all MCP servers in the QuitVaping application.\n\n## Overview\n\nThe QuitVaping app uses multiple MCP (Model Context Protocol) servers to provide intelligent, AI-powered features:\n\n1. **Health Data MCP Server** - Health recovery timelines and NRT protocols\n2. **AI Workflow MCP Server** - Motivation content and intervention planning\n3. **Community Support MCP Server** - Peer matching and supportive responses\n4. **External Services MCP Server** - Weather, location, and trigger analysis\n5. **Analytics MCP Server** - Data analysis and insights\n\n## Testing Strategy\n\nOur testing approach includes:\n- **Unit Testing**: Individual tool functionality\n- **Integration Testing**: Cross-server workflows\n- **Performance Testing**: Response times and load handling\n- **Health Monitoring**: Continuous server health checks\n- **Automated Testing**: Scheduled test runs\n- **Alert Management**: Proactive issue notification"
    },
    {
      "kind": 1,
      "language": "markdown",
      "value": "## Collection Structure\n\n### 1. Individual Server Collections\n\nEach MCP server has its own dedicated Postman collection:\n\n#### Health Data MCP Server Collection\n- **File**: `Health_Data_MCP_Server.postman_collection.json`\n- **Environment**: `Health_Data_MCP_Environment.postman_environment.json`\n- **Notebook**: `Health_Data_MCP_Development.postman_notebook.json`\n\n**Key Endpoints Tested:**\n- `get_health_recovery_timeline` - Personalized health recovery data\n- `get_cessation_benefits` - Current health benefits\n- `get_nrt_protocols` - NRT recommendations\n- `get_personalized_insights` - Health insights and analytics\n\n#### AI Workflow MCP Server Collection\n- **File**: `AI_Workflow_MCP_Server.postman_collection.json`\n- **Environment**: `AI_Workflow_MCP_Environment.postman_environment.json`\n- **Notebook**: `AI_Workflow_Development.postman_notebook.json`\n\n**Key Endpoints Tested:**\n- `generate_motivation_content` - AI-powered motivational content\n- `analyze_mood` - Mood analysis from activity data\n- `create_intervention_plan` - Personalized intervention strategies\n- `generate_celebration_message` - Milestone celebrations\n\n#### Community Support MCP Server Collection\n- **File**: `Community_Support_MCP_Server.postman_collection.json`\n- **Environment**: `Community_Support_MCP_Environment.postman_environment.json`\n- **Notebook**: `Community_Support_Development.postman_notebook.json`\n\n**Key Endpoints Tested:**\n- `register_community_member` - Anonymous member registration\n- `find_peer_matches` - AI-powered peer matching\n- `generate_supportive_response` - AI supportive responses\n- `create_milestone_celebration` - Community milestone sharing\n\n#### External Services MCP Server Collection\n- **File**: `External_Services_MCP_Server.postman_collection.json`\n- **Environment**: `External_Services_MCP_Environment.postman_environment.json`\n- **Notebook**: `External_Services_Development.postman_notebook.json`\n\n**Key Endpoints Tested:**\n- `get_weather` - Weather data for trigger analysis\n- `get_location_context` - Location-based context\n- `analyze_external_triggers` - Multi-factor trigger analysis\n- `get_air_quality` - Air quality for health motivation"
    },
    {
      "kind": 1,
      "language": "markdown",
      "value": "### 2. Automated Testing Suite\n\n**File**: `MCP_Automated_Testing_Suite.postman_collection.json`\n\nThis collection provides comprehensive automated testing across all MCP servers:\n\n#### Test Categories:\n\n1. **Health Data MCP Tests**\n   - Health Recovery Timeline Test\n   - NRT Protocols Test\n   - Personalized Insights Test\n\n2. **AI Workflow MCP Tests**\n   - Motivation Content Generation Test\n   - Mood Analysis Test\n   - Intervention Plan Test\n\n3. **Community Support MCP Tests**\n   - Community Member Registration Test\n   - Supportive Response Generation Test\n   - Peer Matching Test\n\n4. **External Services MCP Tests**\n   - Weather Data Test\n   - Trigger Analysis Test\n   - Location Context Test\n\n5. **Cross-Server Integration Tests**\n   - Complete User Journey Test\n   - Data Flow Validation\n   - Error Handling Tests\n\n6. **Performance Tests**\n   - Response Time Tests\n   - Load Testing\n   - Concurrent Request Handling\n\n#### Test Execution\n\nThe automated testing suite can be run:\n- **Manually**: On-demand testing during development\n- **Scheduled**: Regular automated runs (hourly/daily)\n- **CI/CD Integration**: As part of deployment pipeline\n- **Pre-deployment**: Before production releases"
    },
    {
      "kind": 1,
      "language": "markdown",
      "value": "### 3. Health Monitoring System\n\n**File**: `MCP_Server_Monitoring.postman_collection.json`\n**Environment**: `MCP_Monitoring_Environment.postman_environment.json`\n\nContinuous health monitoring for all MCP servers:\n\n#### Monitoring Components:\n\n1. **Individual Health Checks**\n   - Server responsiveness\n   - Response time monitoring\n   - Endpoint functionality validation\n   - Error rate tracking\n\n2. **System Health Summary**\n   - Overall system health percentage\n   - Average response times\n   - Server availability metrics\n   - Performance trends\n\n3. **Alert Management**\n   - Real-time alert generation\n   - Multi-channel notifications (Slack, Discord, Email)\n   - Alert severity levels\n   - Escalation procedures\n\n#### Monitoring Metrics:\n\n- **Response Time**: Target < 2 seconds, Alert > 5 seconds\n- **Availability**: Target 99.9%, Alert < 95%\n- **Error Rate**: Target < 1%, Alert > 5%\n- **System Health**: Target > 90%, Alert < 75%\n\n#### Alert Thresholds:\n\n- **Low Severity**: Response time 2-5 seconds\n- **Medium Severity**: Response time 5-10 seconds, Error rate 1-5%\n- **High Severity**: Response time > 10 seconds, Error rate > 5%\n- **Critical Severity**: Server down, System health < 50%"
    },
    {
      "kind": 2,
      "language": "javascript",
      "value": "// Example: Running Automated Test Suite\nconst runAutomatedTests = async () => {\n    console.log('Starting MCP Automated Test Suite...');\n    \n    // Test configuration\n    const testConfig = {\n        environment: 'staging', // or 'production'\n        timeout: 30000,\n        retries: 3,\n        parallel: true\n    };\n    \n    // Test servers\n    const servers = [\n        'health-data-mcp',\n        'ai-workflow-mcp', \n        'community-support-mcp',\n        'external-services-mcp',\n        'analytics-mcp'\n    ];\n    \n    console.log(`Testing ${servers.length} MCP servers...`);\n    \n    // Example test results structure\n    const testResults = {\n        timestamp: new Date().toISOString(),\n        environment: testConfig.environment,\n        total_tests: 0,\n        passed_tests: 0,\n        failed_tests: 0,\n        server_results: {},\n        performance_metrics: {\n            average_response_time: 0,\n            slowest_endpoint: '',\n            fastest_endpoint: ''\n        }\n    };\n    \n    console.log('Test configuration:', JSON.stringify(testConfig, null, 2));\n    console.log('Expected results structure:', JSON.stringify(testResults, null, 2));\n};\n\n// Run the example\nrunAutomatedTests();"
    },
    {
      "kind": 2,
      "language": "javascript",
      "value": "// Example: Health Monitoring Setup\nconst setupHealthMonitoring = () => {\n    console.log('Setting up MCP Server Health Monitoring...');\n    \n    // Monitoring configuration\n    const monitoringConfig = {\n        interval: 300, // 5 minutes\n        timeout: 10000, // 10 seconds\n        retries: 2,\n        alert_channels: ['slack', 'email'],\n        thresholds: {\n            response_time_warning: 2000,\n            response_time_critical: 5000,\n            error_rate_warning: 1,\n            error_rate_critical: 5,\n            system_health_warning: 90,\n            system_health_critical: 75\n        }\n    };\n    \n    // Health check endpoints for each server\n    const healthChecks = {\n        'health-data-mcp': {\n            endpoint: 'get_health_recovery_timeline',\n            test_payload: {\n                user_id: 'health_check_user',\n                personalize: false\n            },\n            expected_response_fields: ['timeline', 'user_id']\n        },\n        'ai-workflow-mcp': {\n            endpoint: 'generate_motivation_content',\n            test_payload: {\n                userId: 'health_check_user',\n                mood: 'neutral',\n                recentActivity: [],\n                externalFactors: {}\n            },\n            expected_response_fields: ['content', 'learning_update']\n        },\n        'community-support-mcp': {\n            endpoint: 'generate_supportive_response',\n            test_payload: {\n                context: {\n                    situation: 'routine check',\n                    mood: 'neutral'\n                }\n            },\n            expected_response_fields: ['response', 'ai_generated']\n        },\n        'external-services-mcp': {\n            endpoint: 'get_weather',\n            test_payload: {\n                location: 'current',\n                include_forecast: false\n            },\n            expected_response_fields: ['current']\n        }\n    };\n    \n    console.log('Monitoring configuration:', JSON.stringify(monitoringConfig, null, 2));\n    console.log('Health check endpoints:', JSON.stringify(healthChecks, null, 2));\n};\n\n// Setup monitoring\nsetupHealthMonitoring();"
    },
    {
      "kind": 1,
      "language": "markdown",
      "value": "## Environment Configuration\n\n### Development Environment\n```json\n{\n  \"MCP_SERVER_BASE_URL\": \"ws://localhost:8080\",\n  \"HEALTH_MCP_PORT\": \"8080\",\n  \"AI_WORKFLOW_MCP_PORT\": \"8081\",\n  \"COMMUNITY_MCP_PORT\": \"8082\",\n  \"EXTERNAL_SERVICES_MCP_PORT\": \"8083\",\n  \"ANALYTICS_MCP_PORT\": \"8084\"\n}\n```\n\n### Staging Environment\n```json\n{\n  \"MCP_SERVER_BASE_URL\": \"wss://staging-mcp.quitvaping.app\",\n  \"HEALTH_MCP_URL\": \"wss://staging-mcp.quitvaping.app/health\",\n  \"AI_WORKFLOW_MCP_URL\": \"wss://staging-mcp.quitvaping.app/ai-workflow\",\n  \"COMMUNITY_MCP_URL\": \"wss://staging-mcp.quitvaping.app/community\",\n  \"EXTERNAL_SERVICES_MCP_URL\": \"wss://staging-mcp.quitvaping.app/external\",\n  \"ANALYTICS_MCP_URL\": \"wss://staging-mcp.quitvaping.app/analytics\"\n}\n```\n\n### Production Environment\n```json\n{\n  \"MCP_SERVER_BASE_URL\": \"wss://mcp.quitvaping.app\",\n  \"HEALTH_MCP_URL\": \"wss://mcp.quitvaping.app/health\",\n  \"AI_WORKFLOW_MCP_URL\": \"wss://mcp.quitvaping.app/ai-workflow\",\n  \"COMMUNITY_MCP_URL\": \"wss://mcp.quitvaping.app/community\",\n  \"EXTERNAL_SERVICES_MCP_URL\": \"wss://mcp.quitvaping.app/external\",\n  \"ANALYTICS_MCP_URL\": \"wss://mcp.quitvaping.app/analytics\"\n}\n```"
    },
    {
      "kind": 1,
      "language": "markdown",
      "value": "## API Key Management\n\n### Required API Keys\n\n1. **OpenWeather API**\n   - Variable: `OPENWEATHER_API_KEY`\n   - Purpose: Weather data for trigger analysis\n   - Rate Limit: 1000 calls/day (free tier)\n\n2. **Postman AI Agent API**\n   - Variable: `POSTMAN_AI_AGENT_API_KEY`\n   - Purpose: AI workflow automation\n   - Rate Limit: Based on Postman plan\n\n3. **Medical Database API**\n   - Variable: `MEDICAL_DB_API_KEY`\n   - Purpose: Health data and NRT protocols\n   - Rate Limit: Varies by provider\n\n4. **Location Services API**\n   - Variable: `LOCATION_API_KEY`\n   - Purpose: Geographic context and places\n   - Rate Limit: Varies by provider\n\n### Security Best Practices\n\n- Store API keys as environment variables\n- Use Postman's secret variable type\n- Rotate keys regularly\n- Monitor API usage and quotas\n- Implement fallback mechanisms for API failures\n- Never commit API keys to version control"
    },
    {
      "kind": 1,
      "language": "markdown",
      "value": "## Test Data Management\n\n### Test User Profiles\n\n```javascript\n// Beginner user profile\nconst beginnerUser = {\n    user_id: 'test_beginner_001',\n    quit_date: '2024-01-01T00:00:00Z',\n    quit_stage: 'beginning',\n    vaping_history: {\n        duration_months: 12,\n        daily_usage: 'medium',\n        nicotine_strength: '6mg'\n    },\n    triggers: ['stress', 'social', 'boredom']\n};\n\n// Advanced user profile\nconst advancedUser = {\n    user_id: 'test_advanced_001',\n    quit_date: '2023-06-01T00:00:00Z',\n    quit_stage: 'advanced',\n    vaping_history: {\n        duration_months: 36,\n        daily_usage: 'high',\n        nicotine_strength: '12mg'\n    },\n    triggers: ['alcohol', 'work_stress']\n};\n```\n\n### Mock Data Scenarios\n\n1. **High Craving Scenario**\n   - Multiple recent cravings\n   - High intensity ratings\n   - Stress triggers active\n\n2. **Success Scenario**\n   - Milestone achievements\n   - Positive activities\n   - Low craving frequency\n\n3. **Weather Trigger Scenario**\n   - Rainy/stormy weather\n   - Evening time\n   - Social location\n\n4. **Community Support Scenario**\n   - Struggling user posts\n   - Peer matching requests\n   - Milestone celebrations"
    },
    {
      "kind": 2,
      "language": "javascript",
      "value": "// Example: Test Data Generation\nconst generateTestData = () => {\n    console.log('Generating test data for MCP servers...');\n    \n    // Generate random user for testing\n    const testUser = {\n        user_id: `test_user_${Date.now()}`,\n        quit_date: new Date(Date.now() - (Math.random() * 365 * 24 * 60 * 60 * 1000)).toISOString(),\n        quit_stage: ['beginning', 'early', 'middle', 'advanced', 'maintenance'][Math.floor(Math.random() * 5)],\n        age: Math.floor(Math.random() * 40) + 18,\n        vaping_history: {\n            duration_months: Math.floor(Math.random() * 60) + 6,\n            daily_usage: ['low', 'medium', 'high'][Math.floor(Math.random() * 3)],\n            nicotine_strength: ['3mg', '6mg', '12mg', '18mg'][Math.floor(Math.random() * 4)]\n        },\n        triggers: [\n            'stress', 'social', 'boredom', 'alcohol', 'work', 'driving', 'coffee'\n        ].filter(() => Math.random() > 0.5)\n    };\n    \n    // Generate activity data\n    const activityData = [];\n    for (let i = 0; i < 10; i++) {\n        const activity = {\n            activityType: ['craving_logged', 'exercise', 'meditation', 'milestone_reached'][Math.floor(Math.random() * 4)],\n            timestamp: new Date(Date.now() - (Math.random() * 7 * 24 * 60 * 60 * 1000)).toISOString(),\n            data: {\n                intensity: Math.floor(Math.random() * 10) + 1,\n                duration: Math.floor(Math.random() * 60) + 5\n            }\n        };\n        activityData.push(activity);\n    }\n    \n    // Generate external factors\n    const externalFactors = {\n        weather: ['sunny', 'cloudy', 'rainy', 'stormy', 'clear'][Math.floor(Math.random() * 5)],\n        timeOfDay: ['morning', 'afternoon', 'evening', 'night'][Math.floor(Math.random() * 4)],\n        location: ['home', 'work', 'social', 'outdoor', 'transport'][Math.floor(Math.random() * 5)],\n        temperature: Math.floor(Math.random() * 40) - 10, // -10 to 30 Celsius\n        dayOfWeek: Math.floor(Math.random() * 7) + 1\n    };\n    \n    const testData = {\n        user: testUser,\n        activities: activityData,\n        external_factors: externalFactors,\n        generated_at: new Date().toISOString()\n    };\n    \n    console.log('Generated test data:', JSON.stringify(testData, null, 2));\n    return testData;\n};\n\n// Generate sample test data\nconst sampleData = generateTestData();"
    },
    {
      "kind": 1,
      "language": "markdown",
      "value": "## Performance Benchmarks\n\n### Response Time Targets\n\n| Server | Endpoint | Target (ms) | Warning (ms) | Critical (ms) |\n|--------|----------|-------------|--------------|---------------|\n| Health Data | get_health_recovery_timeline | < 1000 | 2000 | 5000 |\n| Health Data | get_nrt_protocols | < 800 | 1500 | 3000 |\n| AI Workflow | generate_motivation_content | < 2000 | 4000 | 8000 |\n| AI Workflow | analyze_mood | < 500 | 1000 | 2000 |\n| Community | generate_supportive_response | < 3000 | 5000 | 10000 |\n| Community | find_peer_matches | < 2000 | 4000 | 8000 |\n| External | get_weather | < 3000 | 6000 | 12000 |\n| External | analyze_external_triggers | < 1500 | 3000 | 6000 |\n\n### Throughput Targets\n\n- **Concurrent Users**: 100+ simultaneous connections\n- **Requests per Second**: 50+ per server\n- **Daily Request Volume**: 100,000+ total requests\n- **Peak Load Handling**: 5x normal load for 1 hour\n\n### Availability Targets\n\n- **Uptime**: 99.9% (8.76 hours downtime per year)\n- **Recovery Time**: < 5 minutes for planned maintenance\n- **Failover Time**: < 30 seconds for automatic failover\n- **Data Consistency**: 99.99% accuracy in responses"
    },
    {
      "kind": 1,
      "language": "markdown",
      "value": "## Troubleshooting Guide\n\n### Common Issues and Solutions\n\n#### 1. Connection Timeouts\n**Symptoms**: Requests timing out, WebSocket connection failures\n**Causes**: Network issues, server overload, firewall blocking\n**Solutions**:\n- Check server status and logs\n- Verify network connectivity\n- Increase timeout values\n- Implement retry logic\n\n#### 2. High Response Times\n**Symptoms**: Slow API responses, user experience degradation\n**Causes**: Database queries, external API delays, resource constraints\n**Solutions**:\n- Optimize database queries\n- Implement caching\n- Scale server resources\n- Use async processing\n\n#### 3. Authentication Failures\n**Symptoms**: 401/403 errors, API key rejections\n**Causes**: Expired keys, incorrect permissions, rate limiting\n**Solutions**:\n- Refresh API keys\n- Check key permissions\n- Implement key rotation\n- Monitor usage quotas\n\n#### 4. Data Inconsistencies\n**Symptoms**: Incorrect responses, missing data, validation errors\n**Causes**: Data corruption, sync issues, schema changes\n**Solutions**:\n- Validate input data\n- Check data integrity\n- Implement data validation\n- Monitor data quality\n\n### Debugging Tools\n\n1. **Postman Console**: View request/response details\n2. **Server Logs**: Check application logs for errors\n3. **Network Tools**: Monitor network traffic and latency\n4. **Performance Profilers**: Identify bottlenecks\n5. **Health Dashboards**: Monitor system metrics"
    },
    {
      "kind": 1,
      "language": "markdown",
      "value": "## Deployment and CI/CD Integration\n\n### Pre-deployment Testing\n\n```bash\n# Run automated test suite before deployment\nnewman run MCP_Automated_Testing_Suite.postman_collection.json \\\n  -e staging_environment.json \\\n  --reporters cli,json \\\n  --reporter-json-export test-results.json\n\n# Check test results\nif [ $? -eq 0 ]; then\n  echo \"All tests passed - proceeding with deployment\"\nelse\n  echo \"Tests failed - blocking deployment\"\n  exit 1\nfi\n```\n\n### Post-deployment Verification\n\n```bash\n# Run health checks after deployment\nnewman run MCP_Server_Monitoring.postman_collection.json \\\n  -e production_environment.json \\\n  --timeout-request 30000 \\\n  --reporters cli,json\n\n# Verify all servers are healthy\necho \"Deployment verification complete\"\n```\n\n### Continuous Monitoring\n\n```bash\n# Schedule regular health checks (cron job)\n# Run every 5 minutes\n*/5 * * * * newman run MCP_Server_Monitoring.postman_collection.json -e production_environment.json --silent\n\n# Daily comprehensive test run\n0 2 * * * newman run MCP_Automated_Testing_Suite.postman_collection.json -e production_environment.json --reporters json --reporter-json-export daily-test-$(date +%Y%m%d).json\n```\n\n## Conclusion\n\nThis comprehensive testing and monitoring setup ensures:\n\n✅ **Reliability**: Continuous health monitoring and alerting\n✅ **Performance**: Response time tracking and optimization\n✅ **Quality**: Automated testing across all endpoints\n✅ **Observability**: Detailed metrics and logging\n✅ **Scalability**: Load testing and capacity planning\n✅ **Security**: API key management and access control\n\nThe MCP server ecosystem is now fully instrumented for production use with robust testing, monitoring, and alerting capabilities."
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "JavaScript",
      "language": "javascript",
      "name": "javascript"
    },
    "language_info": {
      "name": "javascript",
      "version": "ES2020"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 4
}