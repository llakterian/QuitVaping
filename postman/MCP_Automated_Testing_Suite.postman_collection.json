{
  "info": {
    "name": "MCP Automated Testing Suite",
    "description": "Comprehensive automated testing suite for all MCP servers in the QuitVaping app",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "health_mcp_url",
      "value": "ws://localhost:8080/health-mcp",
      "type": "string"
    },
    {
      "key": "ai_workflow_mcp_url",
      "value": "ws://localhost:8081/ai-workflow-mcp",
      "type": "string"
    },
    {
      "key": "community_mcp_url",
      "value": "ws://localhost:8082/community-mcp",
      "type": "string"
    },
    {
      "key": "external_services_mcp_url",
      "value": "ws://localhost:8083/external-services-mcp",
      "type": "string"
    },
    {
      "key": "analytics_mcp_url",
      "value": "ws://localhost:8084/analytics-mcp",
      "type": "string"
    },
    {
      "key": "test_user_id",
      "value": "automated_test_user_{{$randomUUID}}",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Health Data MCP Tests",
      "item": [
        {
          "name": "Health Recovery Timeline Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Health MCP - Response status is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Health MCP - Timeline data is valid', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.result).to.have.property('content');",
                  "    ",
                  "    const content = JSON.parse(responseJson.result.content[0].text);",
                  "    pm.expect(content).to.have.property('timeline');",
                  "    pm.expect(content.timeline).to.be.an('array');",
                  "    pm.expect(content.timeline.length).to.be.above(0);",
                  "});",
                  "",
                  "pm.test('Health MCP - Timeline items have required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const content = JSON.parse(responseJson.result.content[0].text);",
                  "    ",
                  "    content.timeline.forEach(item => {",
                  "        pm.expect(item).to.have.property('time_description');",
                  "        pm.expect(item).to.have.property('benefit_description');",
                  "        pm.expect(item).to.have.property('stage');",
                  "        pm.expect(item).to.have.property('confidence_level');",
                  "    });",
                  "});",
                  "",
                  "// Store timeline data for subsequent tests",
                  "const responseJson = pm.response.json();",
                  "if (responseJson.result && responseJson.result.content) {",
                  "    pm.globals.set('health_timeline_data', responseJson.result.content[0].text);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"health-timeline-{{$randomUUID}}\",\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"get_health_recovery_timeline\",\n    \"arguments\": {\n      \"user_id\": \"{{test_user_id}}\",\n      \"personalize\": true\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{health_mcp_url}}",
              "host": ["{{health_mcp_url}}"]
            }
          }
        },
        {
          "name": "NRT Protocols Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Health MCP - NRT protocols response is valid', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    const content = JSON.parse(responseJson.result.content[0].text);",
                  "    ",
                  "    pm.expect(content).to.have.property('protocols');",
                  "    pm.expect(content.protocols).to.have.property('recommended_nrt_type');",
                  "    pm.expect(content.protocols).to.have.property('dosage_schedule');",
                  "    pm.expect(content.protocols).to.have.property('duration_weeks');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"nrt-protocols-{{$randomUUID}}\",\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"get_nrt_protocols\",\n    \"arguments\": {\n      \"user_id\": \"{{test_user_id}}\",\n      \"current_stage\": \"initial\"\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{health_mcp_url}}",
              "host": ["{{health_mcp_url}}"]
            }
          }
        }
      ],
      "description": "Automated tests for Health Data MCP Server"
    },
    {
      "name": "AI Workflow MCP Tests",
      "item": [
        {
          "name": "Motivation Content Generation Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('AI Workflow MCP - Motivation content generated', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    const content = JSON.parse(responseJson.result.content[0].text);",
                  "    ",
                  "    pm.expect(content).to.have.property('content');",
                  "    pm.expect(content.content).to.have.property('type');",
                  "    pm.expect(content.content.type).to.eql('mood_based');",
                  "    pm.expect(content.content).to.have.property('content');",
                  "    pm.expect(content.content.content).to.be.a('string');",
                  "    pm.expect(content.content.content.length).to.be.above(10);",
                  "});",
                  "",
                  "pm.test('AI Workflow MCP - Learning update provided', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const content = JSON.parse(responseJson.result.content[0].text);",
                  "    ",
                  "    pm.expect(content).to.have.property('learning_update');",
                  "    pm.expect(content.learning_update).to.have.property('personalized_data');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"ai-motivation-{{$randomUUID}}\",\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"generate_motivation_content\",\n    \"arguments\": {\n      \"userId\": \"{{test_user_id}}\",\n      \"mood\": \"positive\",\n      \"recentActivity\": [\n        {\n          \"activityType\": \"milestone_reached\",\n          \"timestamp\": \"{{$isoTimestamp}}\",\n          \"data\": {\n            \"milestone\": \"24_hours\"\n          }\n        }\n      ],\n      \"externalFactors\": {\n        \"weather\": \"sunny\",\n        \"timeOfDay\": \"morning\"\n      }\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{ai_workflow_mcp_url}}",
              "host": ["{{ai_workflow_mcp_url}}"]
            }
          }
        },
        {
          "name": "Mood Analysis Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('AI Workflow MCP - Mood analysis completed', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    const content = JSON.parse(responseJson.result.content[0].text);",
                  "    ",
                  "    pm.expect(content).to.have.property('mood');",
                  "    pm.expect(content.mood).to.be.oneOf(['positive', 'neutral', 'negative', 'anxious', 'motivated', 'struggling']);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"ai-mood-{{$randomUUID}}\",\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"analyze_mood\",\n    \"arguments\": {\n      \"activityData\": [\n        {\n          \"activityType\": \"craving_logged\",\n          \"timestamp\": \"{{$isoTimestamp}}\",\n          \"data\": {\"intensity\": 7}\n        },\n        {\n          \"activityType\": \"exercise\",\n          \"timestamp\": \"{{$isoTimestamp}}\",\n          \"data\": {\"type\": \"walking\", \"duration\": 15}\n        }\n      ]\n    }\n  }\n}"
            },\n            "url": {\n              "raw": "{{ai_workflow_mcp_url}}",\n              "host": ["{{ai_workflow_mcp_url}}"]\n            }\n          }\n        },\n        {\n          "name": "Intervention Plan Test",\n          "event": [\n            {\n              "listen": "test",\n              "script": {\n                "exec": [\n                  "pm.test('AI Workflow MCP - Intervention plan created', function () {",\n                  "    pm.response.to.have.status(200);",\n                  "    const responseJson = pm.response.json();",\n                  "    const content = JSON.parse(responseJson.result.content[0].text);",\n                  "    ",\n                  "    pm.expect(content).to.have.property('intervention_plan');",\n                  "    pm.expect(content.intervention_plan).to.have.property('interventions');",\n                  "    pm.expect(content.intervention_plan.interventions).to.be.an('array');",\n                  "    pm.expect(content.intervention_plan).to.have.property('success_probability');",\n                  "});"\n                ],\n                "type": "text/javascript"\n              }\n            }\n          ],\n          "request": {\n            "method": "POST",\n            "header": [\n              {\n                "key": "Content-Type",\n                "value": "application/json"\n              }\n            ],\n            "body": {\n              "mode": "raw",\n              "raw": "{\\n  \\"jsonrpc\\": \\"2.0\\",\\n  \\"id\\": \\"ai-intervention-{{$randomUUID}}\\",\\n  \\"method\\": \\"tools/call\\",\\n  \\"params\\": {\\n    \\"name\\": \\"create_intervention_plan\\",\\n    \\"arguments\\": {\\n      \\"userId\\": \\"{{test_user_id}}\\",\\n      \\"mood\\": \\"anxious\\",\\n      \\"availableInterventions\\": [\\"breathing\\", \\"distraction\\", \\"motivation\\"],\\n      \\"learningData\\": {\\n        \\"interventionEffectiveness\\": {\\n          \\"breathing\\": 0.8,\\n          \\"distraction\\": 0.6,\\n          \\"motivation\\": 0.7\\n        }\\n      },\\n      \\"urgency\\": \\"normal\\"\\n    }\\n  }\\n}"\n            },\n            "url": {\n              "raw": "{{ai_workflow_mcp_url}}",\n              "host": ["{{ai_workflow_mcp_url}}"]\n            }\n          }\n        }\n      ],\n      "description": "Automated tests for AI Workflow MCP Server"\n    },\n    {\n      "name": "Community Support MCP Tests",\n      "item": [\n        {\n          "name": "Community Member Registration Test",\n          "event": [\n            {\n              "listen": "test",\n              "script": {\n                "exec": [\n                  "pm.test('Community MCP - Member registration successful', function () {",\n                  "    pm.response.to.have.status(200);",\n                  "    const responseJson = pm.response.json();",\n                  "    const content = JSON.parse(responseJson.result.content[0].text);",\n                  "    ",\n                  "    pm.expect(content).to.have.property('success');",\n                  "    pm.expect(content.success).to.be.true;",\n                  "    pm.expect(content).to.have.property('anonymous_id');",\n                  "    pm.expect(content).to.have.property('member_profile');",\n                  "});",\n                  "",\n                  "// Store anonymous ID for subsequent tests",\n                  "const responseJson = pm.response.json();",\n                  "if (responseJson.result && responseJson.result.content) {",\n                  "    const content = JSON.parse(responseJson.result.content[0].text);",\n                  "    if (content.anonymous_id) {",\n                  "        pm.globals.set('test_anonymous_id', content.anonymous_id);",\n                  "    }",\n                  "}"\n                ],\n                "type": "text/javascript"\n              }\n            }\n          ],\n          "request": {\n            "method": "POST",\n            "header": [\n              {\n                "key": "Content-Type",\n                "value": "application/json"\n              }\n            ],\n            "body": {\n              "mode": "raw",\n              "raw": "{\\n  \\"jsonrpc\\": \\"2.0\\",\\n  \\"id\\": \\"community-register-{{$randomUUID}}\\",\\n  \\"method\\": \\"tools/call\\",\\n  \\"params\\": {\\n    \\"name\\": \\"register_community_member\\",\\n    \\"arguments\\": {\\n      \\"user_id\\": \\"{{test_user_id}}\\",\\n      \\"profile\\": {\\n        \\"quit_stage\\": \\"beginning\\",\\n        \\"quit_date\\": \\"{{$isoTimestamp}}\\",\\n        \\"support_preferences\\": {\\n          \\"types\\": [\\"peer_support\\", \\"motivation\\"]\\n        },\\n        \\"interests\\": [\\"fitness\\", \\"meditation\\"],\\n        \\"timezone\\": \\"UTC\\",\\n        \\"active_hours\\": [\\"morning\\", \\"evening\\"]\\n      }\\n    }\\n  }\\n}"\n            },\n            "url": {\n              "raw": "{{community_mcp_url}}",\n              "host": ["{{community_mcp_url}}"]\n            }\n          }\n        },\n        {\n          "name": "Supportive Response Generation Test",\n          "event": [\n            {\n              "listen": "test",\n              "script": {\n                "exec": [\n                  "pm.test('Community MCP - Supportive response generated', function () {",\n                  "    pm.response.to.have.status(200);",\n                  "    const responseJson = pm.response.json();",\n                  "    const content = JSON.parse(responseJson.result.content[0].text);",\n                  "    ",\n                  "    pm.expect(content).to.have.property('success');",\n                  "    pm.expect(content.success).to.be.true;",\n                  "    pm.expect(content).to.have.property('response');",\n                  "    pm.expect(content.response).to.be.a('string');",\n                  "    pm.expect(content.response.length).to.be.above(20);",\n                  "});"\n                ],\n                "type": "text/javascript"\n              }\n            }\n          ],\n          "request": {\n            "method": "POST",\n            "header": [\n              {\n                "key": "Content-Type",\n                "value": "application/json"\n              }\n            ],\n            "body": {\n              "mode": "raw",\n              "raw": "{\\n  \\"jsonrpc\\": \\"2.0\\",\\n  \\"id\\": \\"community-support-{{$randomUUID}}\\",\\n  \\"method\\": \\"tools/call\\",\\n  \\"params\\": {\\n    \\"name\\": \\"generate_supportive_response\\",\\n    \\"arguments\\": {\\n      \\"context\\": {\\n        \\"user_id\\": \\"{{test_user_id}}\\",\\n        \\"situation\\": \\"struggling with cravings\\",\\n        \\"mood\\": \\"struggling\\",\\n        \\"quit_stage\\": \\"beginning\\",\\n        \\"struggle\\": \\"intense cravings after meals\\"\\n      }\\n    }\\n  }\\n}"\n            },\n            "url": {\n              "raw": "{{community_mcp_url}}",\n              "host": ["{{community_mcp_url}}"]\n            }\n          }\n        }\n      ],\n      "description": "Automated tests for Community Support MCP Server"\n    },\n    {\n      "name": "External Services MCP Tests",\n      "item": [\n        {\n          "name": "Weather Data Test",\n          "event": [\n            {\n              "listen": "test",\n              "script": {\n                "exec": [\n                  "pm.test('External Services MCP - Weather data retrieved', function () {",\n                  "    pm.response.to.have.status(200);",\n                  "    const responseJson = pm.response.json();",\n                  "    const content = JSON.parse(responseJson.result.content[0].text);",\n                  "    ",\n                  "    pm.expect(content).to.have.property('current');",\n                  "    pm.expect(content.current).to.have.property('temperature');",\n                  "    pm.expect(content.current).to.have.property('condition');",\n                  "    pm.expect(content.current).to.have.property('location');",\n                  "});"\n                ],\n                "type": "text/javascript"\n              }\n            }\n          ],\n          "request": {\n            "method": "POST",\n            "header": [\n              {\n                "key": "Content-Type",\n                "value": "application/json"\n              }\n            ],\n            "body": {\n              "mode": "raw",\n              "raw": "{\\n  \\"jsonrpc\\": \\"2.0\\",\\n  \\"id\\": \\"external-weather-{{$randomUUID}}\\",\\n  \\"method\\": \\"tools/call\\",\\n  \\"params\\": {\\n    \\"name\\": \\"get_weather\\",\\n    \\"arguments\\": {\\n      \\"location\\": \\"New York,NY\\",\\n      \\"include_forecast\\": false\\n    }\\n  }\\n}"\n            },\n            "url": {\n              "raw": "{{external_services_mcp_url}}",\n              "host": ["{{external_services_mcp_url}}"]\n            }\n          }\n        },\n        {\n          "name": "Trigger Analysis Test",\n          "event": [\n            {\n              "listen": "test",\n              "script": {\n                "exec": [\n                  "pm.test('External Services MCP - Trigger analysis completed', function () {",\n                  "    pm.response.to.have.status(200);",\n                  "    const responseJson = pm.response.json();",\n                  "    const content = JSON.parse(responseJson.result.content[0].text);",\n                  "    ",\n                  "    pm.expect(content).to.have.property('overall_risk_score');",\n                  "    pm.expect(content.overall_risk_score).to.be.at.least(0);",\n                  "    pm.expect(content.overall_risk_score).to.be.at.most(1);",\n                  "    pm.expect(content).to.have.property('risk_factors');",\n                  "    pm.expect(content).to.have.property('recommendations');",\n                  "    pm.expect(content.recommendations).to.be.an('array');",\n                  "});"\n                ],\n                "type": "text/javascript"\n              }\n            }\n          ],\n          "request": {\n            "method": "POST",\n            "header": [\n              {\n                "key": "Content-Type",\n                "value": "application/json"\n              }\n            ],\n            "body": {\n              "mode": "raw",\n              "raw": "{\\n  \\"jsonrpc\\": \\"2.0\\",\\n  \\"id\\": \\"external-triggers-{{$randomUUID}}\\",\\n  \\"method\\": \\"tools/call\\",\\n  \\"params\\": {\\n    \\"name\\": \\"analyze_external_triggers\\",\\n    \\"arguments\\": {\\n      \\"user_location\\": {\\n        \\"latitude\\": 40.7128,\\n        \\"longitude\\": -74.0060\\n      },\\n      \\"time_of_day\\": 15,\\n      \\"day_of_week\\": 3,\\n      \\"user_triggers\\": [\\"stress\\", \\"work\\"]\\n    }\\n  }\\n}"\n            },\n            "url": {\n              "raw": "{{external_services_mcp_url}}",\n              "host": ["{{external_services_mcp_url}}"]\n            }\n          }\n        }\n      ],\n      "description": "Automated tests for External Services MCP Server"\n    },\n    {\n      "name": "Cross-Server Integration Tests",\n      "item": [\n        {\n          "name": "Complete User Journey Test",\n          "event": [\n            {\n              "listen": "prerequest",\n              "script": {\n                "exec": [\n                  "// Set up test data for complete user journey",\n                  "pm.globals.set('journey_user_id', 'journey_test_' + pm.variables.replaceIn('{{$randomUUID}}'));",\n                  "pm.globals.set('journey_start_time', new Date().toISOString());"\n                ],\n                "type": "text/javascript"\n              }\n            },\n            {\n              "listen": "test",\n              "script": {\n                "exec": [\n                  "pm.test('Cross-Server Integration - User journey completed', function () {",\n                  "    pm.response.to.have.status(200);",\n                  "});",\n                  "",\n                  "pm.test('Cross-Server Integration - All services responded', function () {",\n                  "    // This test would verify that all MCP servers responded correctly",\n                  "    // In a real implementation, this would make sequential calls to all servers",\n                  "    pm.expect(pm.globals.get('health_timeline_data')).to.not.be.undefined;",\n                  "});"\n                ],\n                "type": "text/javascript"\n              }\n            }\n          ],\n          "request": {\n            "method": "POST",\n            "header": [\n              {\n                "key": "Content-Type",\n                "value": "application/json"\n              }\n            ],\n            "body": {\n              "mode": "raw",\n              "raw": "{\\n  \\"jsonrpc\\": \\"2.0\\",\\n  \\"id\\": \\"journey-test-{{$randomUUID}}\\",\\n  \\"method\\": \\"tools/call\\",\\n  \\"params\\": {\\n    \\"name\\": \\"get_health_recovery_timeline\\",\\n    \\"arguments\\": {\\n      \\"user_id\\": \\"{{journey_user_id}}\\",\\n      \\"personalize\\": true\\n    }\\n  }\\n}"\n            },\n            "url": {\n              "raw": "{{health_mcp_url}}",\n              "host": ["{{health_mcp_url}}"]\n            }\n          }\n        }\n      ],\n      "description": "Cross-server integration and user journey tests"\n    },\n    {\n      "name": "Performance Tests",\n      "item": [\n        {\n          "name": "Response Time Test",\n          "event": [\n            {\n              "listen": "test",\n              "script": {\n                "exec": [\n                  "pm.test('Performance - Response time under 5 seconds', function () {",\n                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",\n                  "});",\n                  "",\n                  "pm.test('Performance - Response time under 2 seconds (optimal)', function () {",\n                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",\n                  "});"\n                ],\n                "type": "text/javascript"\n              }\n            }\n          ],\n          "request": {\n            "method": "POST",\n            "header": [\n              {\n                "key": "Content-Type",\n                "value": "application/json"\n              }\n            ],\n            "body": {\n              "mode": "raw",\n              "raw": "{\\n  \\"jsonrpc\\": \\"2.0\\",\\n  \\"id\\": \\"perf-test-{{$randomUUID}}\\",\\n  \\"method\\": \\"tools/call\\",\\n  \\"params\\": {\\n    \\"name\\": \\"get_weather\\",\\n    \\"arguments\\": {\\n      \\"location\\": \\"current\\",\\n      \\"include_forecast\\": false\\n    }\\n  }\\n}"\n            },\n            "url": {\n              "raw": "{{external_services_mcp_url}}",\n              "host": ["{{external_services_mcp_url}}"]\n            }\n          }\n        }\n      ],\n      "description": "Performance and load testing"\n    }\n  ],\n  "event": [\n    {\n      "listen": "prerequest",\n      "script": {\n        "type": "text/javascript",\n        "exec": [\n          "// Global pre-request setup",\n          "pm.globals.set('test_run_id', pm.variables.replaceIn('{{$randomUUID}}'));",\n          "pm.globals.set('test_start_time', new Date().toISOString());",\n          "",\n          "// Log test execution",\n          "console.log('Starting automated test run:', pm.globals.get('test_run_id'));"\n        ]\n      }\n    },\n    {\n      "listen": "test",\n      "script": {\n        "type": "text/javascript",\n        "exec": [\n          "// Global test assertions",\n          "pm.test('Global - Response is valid JSON', function () {",\n          "    pm.response.to.be.json;",\n          "});",\n          "",\n          "pm.test('Global - No server errors', function () {",\n          "    pm.response.to.not.have.status(500);",\n          "    pm.response.to.not.have.status(502);",\n          "    pm.response.to.not.have.status(503);",\n          "});",\n          "",\n          "// Log test results",\n          "const testResults = {",\n          "    test_run_id: pm.globals.get('test_run_id'),",\n          "    request_name: pm.info.requestName,",\n          "    response_time: pm.response.responseTime,",\n          "    status_code: pm.response.code,",\n          "    timestamp: new Date().toISOString()",\n          "};",\n          "",\n          "console.log('Test result:', JSON.stringify(testResults, null, 2));"\n        ]\n      }\n    }\n  ]\n}