{
  "info": {
    "name": "External Services MCP Server",
    "description": "Collection for testing External Services MCP Server endpoints including weather, location, and trigger analysis APIs",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{EXTERNAL_SERVICES_API_KEY}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "mcp_server_url",
      "value": "ws://localhost:8080/mcp",
      "type": "string"
    },
    {
      "key": "weather_api_key",
      "value": "{{OPENWEATHER_API_KEY}}",
      "type": "string"
    },
    {
      "key": "test_user_id",
      "value": "user_12345",
      "type": "string"
    },
    {
      "key": "test_latitude",
      "value": "40.7128",
      "type": "string"
    },
    {
      "key": "test_longitude",
      "value": "-74.0060",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Weather Services",
      "item": [
        {
          "name": "Get Current Weather",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"{{$randomUUID}}\",\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"get_weather\",\n    \"arguments\": {\n      \"location\": \"New York,NY\",\n      \"include_forecast\": false\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{mcp_server_url}}",
              "host": ["{{mcp_server_url}}"]
            },
            "description": "Get current weather data for a specific location"
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"test-123\",\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"get_weather\",\n    \"arguments\": {\n      \"location\": \"New York,NY\",\n      \"include_forecast\": false\n    }\n  }\n}"
                },
                "url": {
                  "raw": "{{mcp_server_url}}",
                  "host": ["{{mcp_server_url}}"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"test-123\",\n  \"result\": {\n    \"content\": [\n      {\n        \"type\": \"text\",\n        \"text\": \"{\\n  \\\"current\\\": {\\n    \\\"location\\\": \\\"New York\\\",\\n    \\\"temperature\\\": 18.5,\\n    \\\"condition\\\": \\\"partly cloudy\\\",\\n    \\\"humidity\\\": 65,\\n    \\\"pressure\\\": 1013,\\n    \\\"wind_speed\\\": 3.2,\\n    \\\"timestamp\\\": \\\"2024-01-15T12:00:00Z\\\"\\n  }\\n}\"\n      }\n    ],\n    \"isError\": false\n  }\n}"
            }
          ]
        },
        {
          "name": "Get Weather with Forecast",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"{{$randomUUID}}\",\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"get_weather\",\n    \"arguments\": {\n      \"location\": \"London,UK\",\n      \"include_forecast\": true\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{mcp_server_url}}",
              "host": ["{{mcp_server_url}}"]
            },
            "description": "Get current weather data with 24-hour forecast"
          }
        },
        {
          "name": "Get Current Location Weather",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"{{$randomUUID}}\",\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"get_weather\",\n    \"arguments\": {\n      \"location\": \"current\",\n      \"include_forecast\": false\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{mcp_server_url}}",
              "host": ["{{mcp_server_url}}"]
            },
            "description": "Get weather data for user's current location"
          }
        }
      ],
      "description": "Weather-related API endpoints for trigger analysis"
    },
    {
      "name": "Location Services",
      "item": [
        {
          "name": "Get Location Context",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"{{$randomUUID}}\",\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"get_location_context\",\n    \"arguments\": {\n      \"latitude\": {{test_latitude}},\n      \"longitude\": {{test_longitude}},\n      \"include_nearby_places\": true\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{mcp_server_url}}",
              "host": ["{{mcp_server_url}}"]
            },
            "description": "Get location-based context including nearby places that might be triggers"
          }
        },
        {
          "name": "Get Location Context Without Nearby Places",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"{{$randomUUID}}\",\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"get_location_context\",\n    \"arguments\": {\n      \"latitude\": 51.5074,\n      \"longitude\": -0.1278,\n      \"include_nearby_places\": false\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{mcp_server_url}}",
              "host": ["{{mcp_server_url}}"]
            },
            "description": "Get basic location context without nearby places analysis"
          }
        }
      ],
      "description": "Location-based context and nearby places analysis"
    },
    {
      "name": "Trigger Analysis",
      "item": [
        {
          "name": "Analyze High Risk External Triggers",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"{{$randomUUID}}\",\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"analyze_external_triggers\",\n    \"arguments\": {\n      \"user_location\": {\n        \"latitude\": {{test_latitude}},\n        \"longitude\": {{test_longitude}}\n      },\n      \"time_of_day\": 18,\n      \"day_of_week\": 1,\n      \"user_triggers\": [\"stress\", \"alcohol\", \"social\", \"boredom\"]\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{mcp_server_url}}",
              "host": ["{{mcp_server_url}}"]
            },
            "description": "Analyze external factors during high-risk scenarios"
          }
        },
        {
          "name": "Analyze Low Risk External Triggers",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"{{$randomUUID}}\",\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"analyze_external_triggers\",\n    \"arguments\": {\n      \"time_of_day\": 10,\n      \"day_of_week\": 3,\n      \"user_triggers\": [\"exercise\", \"meditation\"]\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{mcp_server_url}}",
              "host": ["{{mcp_server_url}}"]
            },
            "description": "Analyze external factors during low-risk scenarios"
          }
        },
        {
          "name": "Analyze Weekend Triggers",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"{{$randomUUID}}\",\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"analyze_external_triggers\",\n    \"arguments\": {\n      \"user_location\": {\n        \"latitude\": 34.0522,\n        \"longitude\": -118.2437\n      },\n      \"time_of_day\": 21,\n      \"day_of_week\": 6,\n      \"user_triggers\": [\"social\", \"alcohol\", \"party\"]\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{mcp_server_url}}",
              "host": ["{{mcp_server_url}}"]
            },
            "description": "Analyze triggers during weekend social situations"
          }
        }
      ],
      "description": "External trigger analysis for craving prediction"
    },
    {
      "name": "Air Quality Services",
      "item": [
        {
          "name": "Get Air Quality Data",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"{{$randomUUID}}\",\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"get_air_quality\",\n    \"arguments\": {\n      \"location\": \"San Francisco,CA\"\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{mcp_server_url}}",
              "host": ["{{mcp_server_url}}"]
            },
            "description": "Get air quality data to show health benefits of quitting"
          }
        },
        {
          "name": "Get Air Quality for Multiple Cities",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"{{$randomUUID}}\",\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"get_air_quality\",\n    \"arguments\": {\n      \"location\": \"Beijing,China\"\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{mcp_server_url}}",
              "host": ["{{mcp_server_url}}"]
            },\n            "description": "Get air quality data for cities with different pollution levels"
          }
        }
      ],
      "description": "Air quality monitoring for health motivation"
    },
    {
      "name": "Integration Tests",
      "item": [
        {
          "name": "Complete Trigger Analysis Workflow",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Response status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains trigger analysis', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.result).to.have.property('content');",
                  "    ",
                  "    const content = JSON.parse(responseJson.result.content[0].text);",
                  "    pm.expect(content).to.have.property('overall_risk_score');",
                  "    pm.expect(content).to.have.property('risk_factors');",
                  "    pm.expect(content).to.have.property('recommendations');",
                  "});",
                  "",
                  "pm.test('Risk score is within valid range', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const content = JSON.parse(responseJson.result.content[0].text);",
                  "    ",
                  "    pm.expect(content.overall_risk_score).to.be.at.least(0);",
                  "    pm.expect(content.overall_risk_score).to.be.at.most(1);",
                  "});",
                  "",
                  "pm.test('Recommendations are provided', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const content = JSON.parse(responseJson.result.content[0].text);",
                  "    ",
                  "    pm.expect(content.recommendations).to.be.an('array');",
                  "    pm.expect(content.recommendations.length).to.be.above(0);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"integration-test-{{$randomUUID}}\",\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"analyze_external_triggers\",\n    \"arguments\": {\n      \"user_location\": {\n        \"latitude\": {{test_latitude}},\n        \"longitude\": {{test_longitude}}\n      },\n      \"time_of_day\": 15,\n      \"day_of_week\": 2,\n      \"user_triggers\": [\"stress\", \"work\", \"coffee\"]\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{mcp_server_url}}",
              "host": ["{{mcp_server_url}}"]
            },
            "description": "Complete workflow test for trigger analysis"
          }
        },
        {
          "name": "Weather and Location Integration Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Weather data is retrieved successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.result).to.have.property('content');",
                  "    ",
                  "    const content = JSON.parse(responseJson.result.content[0].text);",
                  "    pm.expect(content).to.have.property('current');",
                  "    pm.expect(content.current).to.have.property('temperature');",
                  "    pm.expect(content.current).to.have.property('condition');",
                  "});",
                  "",
                  "pm.test('Weather data includes required fields', function () {",
                  "    const responseJson = pm.response.json();",
                  "    const content = JSON.parse(responseJson.result.content[0].text);",
                  "    ",
                  "    pm.expect(content.current).to.have.property('location');",
                  "    pm.expect(content.current).to.have.property('humidity');",
                  "    pm.expect(content.current).to.have.property('pressure');",
                  "    pm.expect(content.current).to.have.property('timestamp');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"weather-integration-{{$randomUUID}}\",\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"get_weather\",\n    \"arguments\": {\n      \"location\": \"Seattle,WA\",\n      \"include_forecast\": true\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{mcp_server_url}}",
              "host": ["{{mcp_server_url}}"]
            },
            "description": "Integration test for weather data retrieval with forecast"
          }
        }
      ],
      "description": "End-to-end integration tests for external services"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set dynamic variables for testing",
          "pm.globals.set('timestamp', new Date().toISOString());",
          "pm.globals.set('request_id', pm.variables.replaceIn('{{$randomUUID}}'));",
          "",
          "// Set current hour for time-based testing",
          "const currentHour = new Date().getHours();",
          "pm.globals.set('current_hour', currentHour);",
          "",
          "// Set current day of week (1-7, Monday-Sunday)",
          "const currentDay = new Date().getDay() || 7; // Convert Sunday from 0 to 7",
          "pm.globals.set('current_day', currentDay);"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Common test assertions for all requests",
          "pm.test('Response status code is 200', function () {",
          "    pm.response.to.have.status(200);",
          "});",
          "",
          "pm.test('Response has valid JSON structure', function () {",
          "    pm.response.to.be.json;",
          "});",
          "",
          "pm.test('Response time is less than 10000ms', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(10000);",
          "});",
          "",
          "pm.test('Response follows MCP protocol', function () {",
          "    const responseJson = pm.response.json();",
          "    pm.expect(responseJson).to.have.property('jsonrpc');",
          "    pm.expect(responseJson).to.have.property('id');",
          "    pm.expect(responseJson).to.have.property('result');",
          "});",
          "",
          "// Store response data for use in subsequent requests",
          "if (pm.response.code === 200) {",
          "    const responseJson = pm.response.json();",
          "    if (responseJson.result && responseJson.result.content) {",
          "        pm.globals.set('last_external_response', JSON.stringify(responseJson.result));",
          "    }",
          "}"
        ]
      }
    }
  ]
}