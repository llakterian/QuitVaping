{
  "info": {
    "name": "MCP Server Health Monitoring",
    "description": "Monitoring collection for all MCP servers with health checks and alerting",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "health_check_interval",
      "value": "300",
      "type": "string",
      "description": "Health check interval in seconds (5 minutes)"
    },
    {
      "key": "alert_webhook_url",
      "value": "{{ALERT_WEBHOOK_URL}}",
      "type": "string",
      "description": "Webhook URL for sending alerts"
    },
    {
      "key": "monitoring_enabled",
      "value": "true",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Health Checks",
      "item": [
        {
          "name": "Health Data MCP Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const serverName = 'Health Data MCP';",
                  "const startTime = Date.now();",
                  "",
                  "pm.test(`${serverName} - Server is responding`, function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(`${serverName} - Response time acceptable`, function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test(`${serverName} - Valid MCP response`, function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('jsonrpc');",
                  "    pm.expect(responseJson).to.have.property('result');",
                  "});",
                  "",
                  "// Health check metrics",
                  "const healthMetrics = {",
                  "    server: serverName,",
                  "    status: pm.response.code === 200 ? 'healthy' : 'unhealthy',",
                  "    response_time: pm.response.responseTime,",
                  "    timestamp: new Date().toISOString(),",
                  "    endpoint: 'get_health_recovery_timeline'",
                  "};",
                  "",
                  "pm.globals.set('health_data_mcp_metrics', JSON.stringify(healthMetrics));",
                  "",
                  "// Alert if unhealthy",
                  "if (pm.response.code !== 200 || pm.response.responseTime > 10000) {",
                  "    pm.globals.set('health_data_mcp_alert', JSON.stringify({",
                  "        severity: 'high',",
                  "        message: `${serverName} is unhealthy - Status: ${pm.response.code}, Response Time: ${pm.response.responseTime}ms`,",
                  "        timestamp: new Date().toISOString()",
                  "    }));",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"health-check-{{$timestamp}}\",\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"get_health_recovery_timeline\",\n    \"arguments\": {\n      \"user_id\": \"health_check_user\",\n      \"personalize\": false\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{health_mcp_url}}",
              "host": ["{{health_mcp_url}}"]
            }
          }
        },
        {
          "name": "AI Workflow MCP Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const serverName = 'AI Workflow MCP';",
                  "",
                  "pm.test(`${serverName} - Server is responding`, function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(`${serverName} - Response time acceptable`, function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test(`${serverName} - AI content generated`, function () {",
                  "    const responseJson = pm.response.json();",
                  "    const content = JSON.parse(responseJson.result.content[0].text);",
                  "    pm.expect(content).to.have.property('content');",
                  "    pm.expect(content.content).to.have.property('content');",
                  "    pm.expect(content.content.content).to.be.a('string');",
                  "});",
                  "",
                  "// Health check metrics",
                  "const healthMetrics = {",
                  "    server: serverName,",
                  "    status: pm.response.code === 200 ? 'healthy' : 'unhealthy',",
                  "    response_time: pm.response.responseTime,",
                  "    timestamp: new Date().toISOString(),",
                  "    endpoint: 'generate_motivation_content'",
                  "};",
                  "",
                  "pm.globals.set('ai_workflow_mcp_metrics', JSON.stringify(healthMetrics));",
                  "",
                  "// Alert if unhealthy",
                  "if (pm.response.code !== 200 || pm.response.responseTime > 10000) {",
                  "    pm.globals.set('ai_workflow_mcp_alert', JSON.stringify({",
                  "        severity: 'high',",
                  "        message: `${serverName} is unhealthy - Status: ${pm.response.code}, Response Time: ${pm.response.responseTime}ms`,",
                  "        timestamp: new Date().toISOString()",
                  "    }));",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"ai-health-check-{{$timestamp}}\",\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"generate_motivation_content\",\n    \"arguments\": {\n      \"userId\": \"health_check_user\",\n      \"mood\": \"neutral\",\n      \"recentActivity\": [],\n      \"externalFactors\": {\n        \"weather\": \"clear\",\n        \"timeOfDay\": \"morning\"\n      }\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{ai_workflow_mcp_url}}",
              "host": ["{{ai_workflow_mcp_url}}"]
            }
          }
        },
        {
          "name": "Community Support MCP Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const serverName = 'Community Support MCP';",
                  "",
                  "pm.test(`${serverName} - Server is responding`, function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(`${serverName} - Response time acceptable`, function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test(`${serverName} - Supportive response generated`, function () {",
                  "    const responseJson = pm.response.json();",
                  "    const content = JSON.parse(responseJson.result.content[0].text);",
                  "    pm.expect(content).to.have.property('response');",
                  "    pm.expect(content.response).to.be.a('string');",
                  "    pm.expect(content.response.length).to.be.above(10);",
                  "});",
                  "",
                  "// Health check metrics",
                  "const healthMetrics = {",
                  "    server: serverName,",
                  "    status: pm.response.code === 200 ? 'healthy' : 'unhealthy',",
                  "    response_time: pm.response.responseTime,",
                  "    timestamp: new Date().toISOString(),",
                  "    endpoint: 'generate_supportive_response'",
                  "};",
                  "",
                  "pm.globals.set('community_mcp_metrics', JSON.stringify(healthMetrics));",
                  "",
                  "// Alert if unhealthy",
                  "if (pm.response.code !== 200 || pm.response.responseTime > 10000) {",
                  "    pm.globals.set('community_mcp_alert', JSON.stringify({",
                  "        severity: 'high',",
                  "        message: `${serverName} is unhealthy - Status: ${pm.response.code}, Response Time: ${pm.response.responseTime}ms`,",
                  "        timestamp: new Date().toISOString()",
                  "    }));",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"community-health-check-{{$timestamp}}\",\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"generate_supportive_response\",\n    \"arguments\": {\n      \"context\": {\n        \"user_id\": \"health_check_user\",\n        \"situation\": \"routine check\",\n        \"mood\": \"neutral\",\n        \"quit_stage\": \"middle\",\n        \"struggle\": \"none\"\n      }\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{community_mcp_url}}",
              "host": ["{{community_mcp_url}}"]
            }
          }
        },
        {
          "name": "External Services MCP Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const serverName = 'External Services MCP';",
                  "",
                  "pm.test(`${serverName} - Server is responding`, function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(`${serverName} - Response time acceptable`, function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000); // External APIs may be slower",
                  "});",
                  "",
                  "pm.test(`${serverName} - Weather data retrieved`, function () {",
                  "    const responseJson = pm.response.json();",
                  "    const content = JSON.parse(responseJson.result.content[0].text);",
                  "    pm.expect(content).to.have.property('current');",
                  "    pm.expect(content.current).to.have.property('temperature');",
                  "});",
                  "",
                  "// Health check metrics",
                  "const healthMetrics = {",
                  "    server: serverName,",
                  "    status: pm.response.code === 200 ? 'healthy' : 'unhealthy',",
                  "    response_time: pm.response.responseTime,",
                  "    timestamp: new Date().toISOString(),",
                  "    endpoint: 'get_weather'",
                  "};",
                  "",
                  "pm.globals.set('external_services_mcp_metrics', JSON.stringify(healthMetrics));",
                  "",
                  "// Alert if unhealthy",
                  "if (pm.response.code !== 200 || pm.response.responseTime > 15000) {",
                  "    pm.globals.set('external_services_mcp_alert', JSON.stringify({",
                  "        severity: 'medium',",
                  "        message: `${serverName} is unhealthy - Status: ${pm.response.code}, Response Time: ${pm.response.responseTime}ms`,",
                  "        timestamp: new Date().toISOString()",
                  "    }));",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"external-health-check-{{$timestamp}}\",\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"get_weather\",\n    \"arguments\": {\n      \"location\": \"current\",\n      \"include_forecast\": false\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{external_services_mcp_url}}",
              "host": ["{{external_services_mcp_url}}"]
            }
          }
        }
      ],
      "description": "Individual health checks for each MCP server"
    },
    {
      "name": "System Health Summary",
      "item": [
        {
          "name": "Generate Health Report",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Collect all health metrics",
                  "const healthDataMetrics = pm.globals.get('health_data_mcp_metrics');",
                  "const aiWorkflowMetrics = pm.globals.get('ai_workflow_mcp_metrics');",
                  "const communityMetrics = pm.globals.get('community_mcp_metrics');",
                  "const externalServicesMetrics = pm.globals.get('external_services_mcp_metrics');",
                  "",
                  "const allMetrics = [",
                  "    healthDataMetrics ? JSON.parse(healthDataMetrics) : null,",
                  "    aiWorkflowMetrics ? JSON.parse(aiWorkflowMetrics) : null,",
                  "    communityMetrics ? JSON.parse(communityMetrics) : null,",
                  "    externalServicesMetrics ? JSON.parse(externalServicesMetrics) : null",
                  "].filter(m => m !== null);",
                  "",
                  "// Calculate system health",
                  "const healthyServers = allMetrics.filter(m => m.status === 'healthy').length;",
                  "const totalServers = allMetrics.length;",
                  "const systemHealthPercentage = totalServers > 0 ? (healthyServers / totalServers) * 100 : 0;",
                  "",
                  "const healthReport = {",
                  "    timestamp: new Date().toISOString(),",
                  "    system_health_percentage: systemHealthPercentage,",
                  "    healthy_servers: healthyServers,",
                  "    total_servers: totalServers,",
                  "    average_response_time: allMetrics.length > 0 ? ",
                  "        allMetrics.reduce((sum, m) => sum + m.response_time, 0) / allMetrics.length : 0,",
                  "    server_details: allMetrics",
                  "};",
                  "",
                  "console.log('System Health Report:', JSON.stringify(healthReport, null, 2));",
                  "",
                  "pm.test('System Health - At least 75% servers healthy', function () {",
                  "    pm.expect(systemHealthPercentage).to.be.at.least(75);",
                  "});",
                  "",
                  "pm.test('System Health - Average response time under 5 seconds', function () {",
                  "    pm.expect(healthReport.average_response_time).to.be.below(5000);",
                  "});",
                  "",
                  "// Store health report",
                  "pm.globals.set('system_health_report', JSON.stringify(healthReport));",
                  "",
                  "// Generate alerts if system health is poor",
                  "if (systemHealthPercentage < 75) {",
                  "    pm.globals.set('system_health_alert', JSON.stringify({",
                  "        severity: 'critical',",
                  "        message: `System health is ${systemHealthPercentage.toFixed(1)}% - Only ${healthyServers}/${totalServers} servers healthy`,",
                  "        timestamp: new Date().toISOString(),",
                  "        details: healthReport",
                  "    }));",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://httpbin.org/status/200",
              "protocol": "https",
              "host": ["httpbin.org"],
              "path": ["status", "200"]
            },
            "description": "Dummy request to trigger health report generation"
          }
        }
      ],
      "description": "System-wide health reporting and alerting"
    },
    {
      "name": "Alert Management",
      "item": [
        {
          "name": "Send Health Alerts",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Collect all alerts",
                  "const alerts = [];",
                  "",
                  "const healthDataAlert = pm.globals.get('health_data_mcp_alert');",
                  "const aiWorkflowAlert = pm.globals.get('ai_workflow_mcp_alert');",
                  "const communityAlert = pm.globals.get('community_mcp_alert');",
                  "const externalServicesAlert = pm.globals.get('external_services_mcp_alert');",
                  "const systemHealthAlert = pm.globals.get('system_health_alert');",
                  "",
                  "if (healthDataAlert) alerts.push(JSON.parse(healthDataAlert));",
                  "if (aiWorkflowAlert) alerts.push(JSON.parse(aiWorkflowAlert));",
                  "if (communityAlert) alerts.push(JSON.parse(communityAlert));",
                  "if (externalServicesAlert) alerts.push(JSON.parse(externalServicesAlert));",
                  "if (systemHealthAlert) alerts.push(JSON.parse(systemHealthAlert));",
                  "",
                  "if (alerts.length > 0) {",
                  "    const alertPayload = {",
                  "        timestamp: new Date().toISOString(),",
                  "        alert_count: alerts.length,",
                  "        alerts: alerts,",
                  "        system_health_report: pm.globals.get('system_health_report')",
                  "    };",
                  "    ",
                  "    pm.globals.set('alert_payload', JSON.stringify(alertPayload));",
                  "    console.log('Sending alerts:', JSON.stringify(alertPayload, null, 2));",
                  "} else {",
                  "    pm.globals.set('alert_payload', JSON.stringify({",
                  "        timestamp: new Date().toISOString(),",
                  "        alert_count: 0,",
                  "        message: 'All systems healthy'",
                  "    }));",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Alert webhook - Response received', function () {",
                  "    // This would test the actual webhook response",
                  "    // For now, we'll just verify the payload was prepared",
                  "    const alertPayload = pm.globals.get('alert_payload');",
                  "    pm.expect(alertPayload).to.not.be.undefined;",
                  "});",
                  "",
                  "// Clean up alert globals after sending",
                  "pm.globals.unset('health_data_mcp_alert');",
                  "pm.globals.unset('ai_workflow_mcp_alert');",
                  "pm.globals.unset('community_mcp_alert');",
                  "pm.globals.unset('external_services_mcp_alert');",
                  "pm.globals.unset('system_health_alert');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{alert_payload}}"
            },
            "url": {
              "raw": "{{alert_webhook_url}}",
              "host": ["{{alert_webhook_url}}"]
            },
            "description": "Send consolidated health alerts to webhook endpoint"
          }
        }
      ],
      "description": "Alert management and notification system"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set monitoring session ID",
          "if (!pm.globals.get('monitoring_session_id')) {",
          "    pm.globals.set('monitoring_session_id', pm.variables.replaceIn('{{$randomUUID}}'));",
          "}",
          "",
          "// Set current timestamp",
          "pm.globals.set('monitoring_timestamp', new Date().toISOString());",
          "",
          "console.log('Health monitoring session:', pm.globals.get('monitoring_session_id'));"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global monitoring test - ensure monitoring is working",
          "pm.test('Monitoring - Session active', function () {",
          "    pm.expect(pm.globals.get('monitoring_session_id')).to.not.be.undefined;",
          "});",
          "",
          "// Log monitoring activity",
          "const monitoringLog = {",
          "    session_id: pm.globals.get('monitoring_session_id'),",
          "    request_name: pm.info.requestName,",
          "    timestamp: pm.globals.get('monitoring_timestamp'),",
          "    response_time: pm.response.responseTime,",
          "    status_code: pm.response.code",
          "};",
          "",
          "console.log('Monitoring log:', JSON.stringify(monitoringLog));"
        ]
      }
    }
  ]
}