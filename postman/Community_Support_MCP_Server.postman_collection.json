{
  "info": {
    "name": "Community Support MCP Server",
    "description": "Collection for testing community support MCP server endpoints including peer matching, secure messaging, AI-generated responses, and milestone sharing",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8000",
      "type": "string"
    },
    {
      "key": "user_id",
      "value": "test_user_123",
      "type": "string"
    },
    {
      "key": "anonymous_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "message_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "share_id",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "User Profile Management",
      "item": [
        {
          "name": "Create User Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains anonymous_id', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('anonymous_id');",
                  "    pm.collectionVariables.set('anonymous_id', responseJson.anonymous_id);",
                  "});",
                  "",
                  "pm.test('Profile created successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.profile_created).to.be.true;",
                  "    pm.expect(responseJson.matching_enabled).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"method\": \"create_user_profile\",\n  \"params\": {\n    \"user_id\": \"{{user_id}}\",\n    \"days_quit\": 15,\n    \"support_preferences\": [\"emotional\", \"motivational\"],\n    \"availability_hours\": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],\n    \"timezone\": \"UTC\",\n    \"language\": \"en\",\n    \"interests\": [\"fitness\", \"meditation\", \"reading\"],\n    \"personality_traits\": [\"supportive\", \"empathetic\"]\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/mcp/call",
              "host": ["{{base_url}}"],
              "path": ["mcp", "call"]
            }
          }
        }
      ]
    },
    {
      "name": "Peer Matching",
      "item": [
        {
          "name": "Find Peer Matches",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains matches', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('matches');",
                  "    pm.expect(responseJson.matches).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Matching algorithm is AI-based', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.matching_algorithm).to.equal('ai_compatibility_scoring');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"method\": \"find_peer_matches\",\n  \"params\": {\n    \"user_id\": \"{{user_id}}\",\n    \"max_matches\": 5,\n    \"min_compatibility_score\": 0.3\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/mcp/call",
              "host": ["{{base_url}}"],
              "path": ["mcp", "call"]
            }
          }
        }
      ]
    },
    {
      "name": "Secure Messaging",
      "item": [
        {
          "name": "Send Secure Message",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Message sent successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.sent).to.be.true;",
                  "    pm.expect(responseJson.encrypted).to.be.true;",
                  "    pm.collectionVariables.set('message_id', responseJson.message_id);",
                  "});",
                  "",
                  "pm.test('Message has expiration', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('expires_at');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"method\": \"send_secure_message\",\n  \"params\": {\n    \"sender_user_id\": \"{{user_id}}\",\n    \"recipient_anonymous_id\": \"test_recipient_456\",\n    \"content\": \"Hi! I'm on day 15 of my quit journey. How are you doing?\",\n    \"message_type\": \"support\",\n    \"expires_hours\": 24\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/mcp/call",
              "host": ["{{base_url}}"],
              "path": ["mcp", "call"]
            }
          }
        },
        {
          "name": "Get Messages",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains messages array', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('messages');",
                  "    pm.expect(responseJson.messages).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Response contains user anonymous ID', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('user_anonymous_id');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"method\": \"get_messages\",\n  \"params\": {\n    \"user_id\": \"{{user_id}}\",\n    \"limit\": 20,\n    \"message_type\": \"support\"\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/mcp/call",
              "host": ["{{base_url}}"],
              "path": ["mcp", "call"]
            }
          }
        }
      ]
    },
    {
      "name": "AI-Generated Support",
      "item": [
        {
          "name": "Generate Supportive Response - Struggling",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains supportive message', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('response');",
                  "    pm.expect(responseJson.response).to.be.a('string');",
                  "    pm.expect(responseJson.response.length).to.be.greaterThan(0);",
                  "});",
                  "",
                  "pm.test('Response has high confidence', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.confidence).to.be.greaterThan(0.7);",
                  "});",
                  "",
                  "pm.test('Response includes follow-up suggestions', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.follow_up_suggestions).to.be.an('array');",
                  "    pm.expect(responseJson.follow_up_suggestions.length).to.be.greaterThan(0);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"method\": \"generate_supportive_response\",\n  \"params\": {\n    \"context\": \"User is experiencing a strong craving and feeling overwhelmed\",\n    \"user_mood\": \"struggling\",\n    \"support_type\": \"emotional\",\n    \"personalization_data\": {\n      \"days_quit\": 15,\n      \"previous_successful_strategies\": [\"breathing exercises\", \"calling friend\"]\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/mcp/call",
              "host": ["{{base_url}}"],
              "path": ["mcp", "call"]
            }
          }
        },
        {
          "name": "Generate Supportive Response - Anxious",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response addresses anxiety', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.mood_addressed).to.equal('anxious');",
                  "    pm.expect(responseJson.support_type).to.equal('practical');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"method\": \"generate_supportive_response\",\n  \"params\": {\n    \"context\": \"User is feeling anxious about social situations without vaping\",\n    \"user_mood\": \"anxious\",\n    \"support_type\": \"practical\",\n    \"personalization_data\": {\n      \"days_quit\": 15\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/mcp/call",
              "host": ["{{base_url}}"],
              "path": ["mcp", "call"]
            }
          }
        },
        {
          "name": "Generate Supportive Response - Motivated",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response reinforces motivation', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.mood_addressed).to.equal('motivated');",
                  "    pm.expect(responseJson.support_type).to.equal('motivational');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"method\": \"generate_supportive_response\",\n  \"params\": {\n    \"context\": \"User is feeling very motivated and wants to help others\",\n    \"user_mood\": \"motivated\",\n    \"support_type\": \"motivational\",\n    \"personalization_data\": {\n      \"days_quit\": 15\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/mcp/call",
              "host": ["{{base_url}}"],
              "path": ["mcp", "call"]
            }
          }
        }
      ]
    },
    {
      "name": "Milestone Sharing",
      "item": [
        {
          "name": "Share Milestone - First Week",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Milestone shared successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('share_id');",
                  "    pm.expect(responseJson.community_visibility).to.be.true;",
                  "    pm.collectionVariables.set('share_id', responseJson.share_id);",
                  "});",
                  "",
                  "pm.test('Celebration message generated', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.celebration_message).to.include('week');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"method\": \"share_milestone\",\n  \"params\": {\n    \"user_id\": \"{{user_id}}\",\n    \"milestone_type\": \"first_week\",\n    \"days_achieved\": 7,\n    \"personal_message\": \"Feeling great! The first week was tough but I made it through.\",\n    \"celebration_level\": \"standard\"\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/mcp/call",
              "host": ["{{base_url}}"],
              "path": ["mcp", "call"]
            }
          }
        },
        {
          "name": "Get Community Milestones",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains milestones', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('milestones');",
                  "    pm.expect(responseJson.milestones).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Community is active', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.community_active).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"method\": \"get_community_milestones\",\n  \"params\": {\n    \"limit\": 10\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/mcp/call",
              "host": ["{{base_url}}"],
              "path": ["mcp", "call"]
            }
          }
        },
        {
          "name": "React to Milestone",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Reaction added successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.reaction_added).to.be.true;",
                  "    pm.expect(responseJson.reaction_type).to.equal('celebrate');",
                  "});",
                  "",
                  "pm.test('Total reactions updated', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.total_reactions).to.be.greaterThan(0);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"method\": \"react_to_milestone\",\n  \"params\": {\n    \"user_id\": \"{{user_id}}\",\n    \"share_id\": \"{{share_id}}\",\n    \"reaction_type\": \"celebrate\"\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/mcp/call",
              "host": ["{{base_url}}"],
              "path": ["mcp", "call"]
            }
          }
        }
      ]
    },
    {
      "name": "Integration Tests",
      "item": [
        {
          "name": "Complete Community Workflow",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// This test runs a complete workflow:",
                  "// 1. Create profile",
                  "// 2. Find matches", 
                  "// 3. Send message",
                  "// 4. Generate support response",
                  "// 5. Share milestone",
                  "// 6. React to milestone",
                  "",
                  "pm.test('Complete workflow executed successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"method\": \"get_community_milestones\",\n  \"params\": {\n    \"limit\": 5\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/mcp/call",
              "host": ["{{base_url}}"],
              "path": ["mcp", "call"]
            }
          }
        }
      ]
    }
  ]
}