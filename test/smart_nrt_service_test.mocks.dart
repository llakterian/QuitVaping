// Mocks generated by Mockito 5.4.5 from annotations
// in quit_vaping/test/smart_nrt_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:ui' as _i12;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i11;
import 'package:quit_vaping/data/models/mcp_cache_models.dart' as _i3;
import 'package:quit_vaping/data/models/mcp_error_models.dart' as _i8;
import 'package:quit_vaping/data/models/mcp_feedback_models.dart' as _i5;
import 'package:quit_vaping/data/models/mcp_model.dart' as _i2;
import 'package:quit_vaping/data/models/nrt_model.dart' as _i10;
import 'package:quit_vaping/data/services/battery_optimization_service.dart'
    as _i4;
import 'package:quit_vaping/data/services/mcp_manager_service.dart' as _i6;
import 'package:quit_vaping/data/services/nrt_service.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMCPResponse_0 extends _i1.SmartFake implements _i2.MCPResponse {
  _FakeMCPResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMCPCacheStats_1 extends _i1.SmartFake implements _i3.MCPCacheStats {
  _FakeMCPCacheStats_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBatteryOptimizationStatus_2 extends _i1.SmartFake
    implements _i4.BatteryOptimizationStatus {
  _FakeBatteryOptimizationStatus_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMCPSystemHealth_3 extends _i1.SmartFake
    implements _i5.MCPSystemHealth {
  _FakeMCPSystemHealth_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MCPManagerService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMCPManagerService extends _i1.Mock implements _i6.MCPManagerService {
  MockMCPManagerService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Stream<_i2.MCPResponse> get motivationStream => (super.noSuchMethod(
        Invocation.getter(#motivationStream),
        returnValue: _i7.Stream<_i2.MCPResponse>.empty(),
      ) as _i7.Stream<_i2.MCPResponse>);

  @override
  _i7.Stream<_i2.MCPResponse> get healthInsightsStream => (super.noSuchMethod(
        Invocation.getter(#healthInsightsStream),
        returnValue: _i7.Stream<_i2.MCPResponse>.empty(),
      ) as _i7.Stream<_i2.MCPResponse>);

  @override
  _i7.Stream<_i2.MCPResponse> get interventionStream => (super.noSuchMethod(
        Invocation.getter(#interventionStream),
        returnValue: _i7.Stream<_i2.MCPResponse>.empty(),
      ) as _i7.Stream<_i2.MCPResponse>);

  @override
  _i7.Stream<_i8.MCPUserNotification> get errorNotificationStream =>
      (super.noSuchMethod(
        Invocation.getter(#errorNotificationStream),
        returnValue: _i7.Stream<_i8.MCPUserNotification>.empty(),
      ) as _i7.Stream<_i8.MCPUserNotification>);

  @override
  _i7.Stream<_i5.MCPUserFeedback> get userFeedbackStream => (super.noSuchMethod(
        Invocation.getter(#userFeedbackStream),
        returnValue: _i7.Stream<_i5.MCPUserFeedback>.empty(),
      ) as _i7.Stream<_i5.MCPUserFeedback>);

  @override
  _i7.Stream<_i5.MCPServiceStatus> get serviceStatusStream =>
      (super.noSuchMethod(
        Invocation.getter(#serviceStatusStream),
        returnValue: _i7.Stream<_i5.MCPServiceStatus>.empty(),
      ) as _i7.Stream<_i5.MCPServiceStatus>);

  @override
  bool get isOfflineMode => (super.noSuchMethod(
        Invocation.getter(#isOfflineMode),
        returnValue: false,
      ) as bool);

  @override
  _i7.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<_i2.MCPResponse> getHealthRecoveryTimeline(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getHealthRecoveryTimeline,
          [userId],
        ),
        returnValue: _i7.Future<_i2.MCPResponse>.value(_FakeMCPResponse_0(
          this,
          Invocation.method(
            #getHealthRecoveryTimeline,
            [userId],
          ),
        )),
      ) as _i7.Future<_i2.MCPResponse>);

  @override
  _i7.Future<_i2.MCPResponse> generateMotivationContent(
          _i2.AIWorkflowContext? context) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateMotivationContent,
          [context],
        ),
        returnValue: _i7.Future<_i2.MCPResponse>.value(_FakeMCPResponse_0(
          this,
          Invocation.method(
            #generateMotivationContent,
            [context],
          ),
        )),
      ) as _i7.Future<_i2.MCPResponse>);

  @override
  _i7.Future<_i2.MCPResponse> analyzeUserPatterns(
    String? userId,
    List<_i2.UserActivity>? activities,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #analyzeUserPatterns,
          [
            userId,
            activities,
          ],
        ),
        returnValue: _i7.Future<_i2.MCPResponse>.value(_FakeMCPResponse_0(
          this,
          Invocation.method(
            #analyzeUserPatterns,
            [
              userId,
              activities,
            ],
          ),
        )),
      ) as _i7.Future<_i2.MCPResponse>);

  @override
  _i7.Future<_i2.MCPResponse> createInterventionPlan(
          _i2.AIWorkflowContext? context) =>
      (super.noSuchMethod(
        Invocation.method(
          #createInterventionPlan,
          [context],
        ),
        returnValue: _i7.Future<_i2.MCPResponse>.value(_FakeMCPResponse_0(
          this,
          Invocation.method(
            #createInterventionPlan,
            [context],
          ),
        )),
      ) as _i7.Future<_i2.MCPResponse>);

  @override
  _i7.Future<_i2.MCPResponse> getWeatherData(String? location) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWeatherData,
          [location],
        ),
        returnValue: _i7.Future<_i2.MCPResponse>.value(_FakeMCPResponse_0(
          this,
          Invocation.method(
            #getWeatherData,
            [location],
          ),
        )),
      ) as _i7.Future<_i2.MCPResponse>);

  @override
  _i7.Future<_i2.MCPResponse> getFinancialOpportunities(double? savedAmount) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFinancialOpportunities,
          [savedAmount],
        ),
        returnValue: _i7.Future<_i2.MCPResponse>.value(_FakeMCPResponse_0(
          this,
          Invocation.method(
            #getFinancialOpportunities,
            [savedAmount],
          ),
        )),
      ) as _i7.Future<_i2.MCPResponse>);

  @override
  _i7.Future<_i2.MCPResponse> matchCommunityPeers(
    String? userId,
    Map<String, dynamic>? preferences,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #matchCommunityPeers,
          [
            userId,
            preferences,
          ],
        ),
        returnValue: _i7.Future<_i2.MCPResponse>.value(_FakeMCPResponse_0(
          this,
          Invocation.method(
            #matchCommunityPeers,
            [
              userId,
              preferences,
            ],
          ),
        )),
      ) as _i7.Future<_i2.MCPResponse>);

  @override
  _i7.Future<_i2.MCPResponse> getNRTProtocols(
    String? userId,
    Map<String, dynamic>? userProfile,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNRTProtocols,
          [
            userId,
            userProfile,
          ],
        ),
        returnValue: _i7.Future<_i2.MCPResponse>.value(_FakeMCPResponse_0(
          this,
          Invocation.method(
            #getNRTProtocols,
            [
              userId,
              userProfile,
            ],
          ),
        )),
      ) as _i7.Future<_i2.MCPResponse>);

  @override
  _i7.Future<_i2.MCPResponse> sendRequest(_i2.MCPRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendRequest,
          [request],
        ),
        returnValue: _i7.Future<_i2.MCPResponse>.value(_FakeMCPResponse_0(
          this,
          Invocation.method(
            #sendRequest,
            [request],
          ),
        )),
      ) as _i7.Future<_i2.MCPResponse>);

  @override
  _i7.Future<_i2.MCPResponse> generateCelebrationMessage(
    String? userId,
    String? milestone,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateCelebrationMessage,
          [
            userId,
            milestone,
          ],
        ),
        returnValue: _i7.Future<_i2.MCPResponse>.value(_FakeMCPResponse_0(
          this,
          Invocation.method(
            #generateCelebrationMessage,
            [
              userId,
              milestone,
            ],
          ),
        )),
      ) as _i7.Future<_i2.MCPResponse>);

  @override
  _i7.Future<_i2.MCPResponse> predictQuitSuccess(
    String? userId,
    List<_i2.UserActivity>? recentActivity,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #predictQuitSuccess,
          [
            userId,
            recentActivity,
          ],
        ),
        returnValue: _i7.Future<_i2.MCPResponse>.value(_FakeMCPResponse_0(
          this,
          Invocation.method(
            #predictQuitSuccess,
            [
              userId,
              recentActivity,
            ],
          ),
        )),
      ) as _i7.Future<_i2.MCPResponse>);

  @override
  _i7.Future<_i2.MCPResponse> createProgressReport(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #createProgressReport,
          [userId],
        ),
        returnValue: _i7.Future<_i2.MCPResponse>.value(_FakeMCPResponse_0(
          this,
          Invocation.method(
            #createProgressReport,
            [userId],
          ),
        )),
      ) as _i7.Future<_i2.MCPResponse>);

  @override
  bool areServersAvailable(List<String>? requiredServers) =>
      (super.noSuchMethod(
        Invocation.method(
          #areServersAvailable,
          [requiredServers],
        ),
        returnValue: false,
      ) as bool);

  @override
  Map<String, _i2.MCPServerStatus> getServerStatuses() => (super.noSuchMethod(
        Invocation.method(
          #getServerStatuses,
          [],
        ),
        returnValue: <String, _i2.MCPServerStatus>{},
      ) as Map<String, _i2.MCPServerStatus>);

  @override
  _i7.Future<List<_i2.MCPResponse>> executeParallelRequests(
          List<_i2.MCPRequest>? requests) =>
      (super.noSuchMethod(
        Invocation.method(
          #executeParallelRequests,
          [requests],
        ),
        returnValue:
            _i7.Future<List<_i2.MCPResponse>>.value(<_i2.MCPResponse>[]),
      ) as _i7.Future<List<_i2.MCPResponse>>);

  @override
  _i7.Future<_i3.MCPCacheStats> getCacheStats() => (super.noSuchMethod(
        Invocation.method(
          #getCacheStats,
          [],
        ),
        returnValue: _i7.Future<_i3.MCPCacheStats>.value(_FakeMCPCacheStats_1(
          this,
          Invocation.method(
            #getCacheStats,
            [],
          ),
        )),
      ) as _i7.Future<_i3.MCPCacheStats>);

  @override
  _i7.Future<void> clearCache() => (super.noSuchMethod(
        Invocation.method(
          #clearCache,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i4.BatteryOptimizationStatus getBatteryStatus() => (super.noSuchMethod(
        Invocation.method(
          #getBatteryStatus,
          [],
        ),
        returnValue: _FakeBatteryOptimizationStatus_2(
          this,
          Invocation.method(
            #getBatteryStatus,
            [],
          ),
        ),
      ) as _i4.BatteryOptimizationStatus);

  @override
  void updateBatterySettings(_i3.BatteryOptimizationSettings? settings) =>
      super.noSuchMethod(
        Invocation.method(
          #updateBatterySettings,
          [settings],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void forceLowPowerMode(bool? enabled) => super.noSuchMethod(
        Invocation.method(
          #forceLowPowerMode,
          [enabled],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<_i2.MCPResponse?> getOfflineContent(
    _i2.MCPResponseType? responseType,
    String? context,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOfflineContent,
          [
            responseType,
            context,
          ],
        ),
        returnValue: _i7.Future<_i2.MCPResponse?>.value(),
      ) as _i7.Future<_i2.MCPResponse?>);

  @override
  Map<String, _i8.MCPServiceDegradation> getCurrentDegradations() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCurrentDegradations,
          [],
        ),
        returnValue: <String, _i8.MCPServiceDegradation>{},
      ) as Map<String, _i8.MCPServiceDegradation>);

  @override
  Map<String, _i5.MCPServiceStatus> getCurrentServiceStatuses() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCurrentServiceStatuses,
          [],
        ),
        returnValue: <String, _i5.MCPServiceStatus>{},
      ) as Map<String, _i5.MCPServiceStatus>);

  @override
  _i5.MCPSystemHealth getSystemHealth() => (super.noSuchMethod(
        Invocation.method(
          #getSystemHealth,
          [],
        ),
        returnValue: _FakeMCPSystemHealth_3(
          this,
          Invocation.method(
            #getSystemHealth,
            [],
          ),
        ),
      ) as _i5.MCPSystemHealth);

  @override
  _i7.Future<void> handleRecoveryAction(
    _i8.MCPRecoveryActionType? actionType,
    Map<String, dynamic>? parameters,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleRecoveryAction,
          [
            actionType,
            parameters,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}

/// A class which mocks [NRTService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNRTService extends _i1.Mock implements _i9.NRTService {
  MockNRTService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i10.NRTModel> get nrtUsage => (super.noSuchMethod(
        Invocation.getter(#nrtUsage),
        returnValue: <_i10.NRTModel>[],
      ) as List<_i10.NRTModel>);

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  bool get hasSchedule => (super.noSuchMethod(
        Invocation.getter(#hasSchedule),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i7.Future<void> recordNRTUsage({
    required String? userId,
    required _i10.NRTType? type,
    required double? nicotineStrength,
    String? notes,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #recordNRTUsage,
          [],
          {
            #userId: userId,
            #type: type,
            #nicotineStrength: nicotineStrength,
            #notes: notes,
          },
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> setNRTSchedule({
    required String? userId,
    required _i10.NRTType? type,
    required double? initialStrength,
    required int? frequencyPerDay,
    required DateTime? startDate,
    required List<_i10.NRTStepModel>? reductionSteps,
    String? notes,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setNRTSchedule,
          [],
          {
            #userId: userId,
            #type: type,
            #initialStrength: initialStrength,
            #frequencyPerDay: frequencyPerDay,
            #startDate: startDate,
            #reductionSteps: reductionSteps,
            #notes: notes,
          },
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> updateCurrentStrength(double? strength) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateCurrentStrength,
          [strength],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> deleteNRTUsage(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteNRTUsage,
          [id],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> deleteNRTSchedule() => (super.noSuchMethod(
        Invocation.method(
          #deleteNRTSchedule,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  List<_i10.NRTModel> getNRTUsageForDay(DateTime? date) => (super.noSuchMethod(
        Invocation.method(
          #getNRTUsageForDay,
          [date],
        ),
        returnValue: <_i10.NRTModel>[],
      ) as List<_i10.NRTModel>);

  @override
  double getTotalNicotineForDay(DateTime? date) => (super.noSuchMethod(
        Invocation.method(
          #getTotalNicotineForDay,
          [date],
        ),
        returnValue: 0.0,
      ) as double);

  @override
  String getUsageTrend(int? days) => (super.noSuchMethod(
        Invocation.method(
          #getUsageTrend,
          [days],
        ),
        returnValue: _i11.dummyValue<String>(
          this,
          Invocation.method(
            #getUsageTrend,
            [days],
          ),
        ),
      ) as String);

  @override
  _i7.Future<void> clearAllData() => (super.noSuchMethod(
        Invocation.method(
          #clearAllData,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  void addListener(_i12.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i12.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
