// Mocks generated by Mockito 5.4.5 from annotations
// in quit_vaping/test/community_support_integration_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:quit_vaping/data/models/mcp_model.dart' as _i2;
import 'package:quit_vaping/data/services/mcp_client_service.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMCPResponse_0 extends _i1.SmartFake implements _i2.MCPResponse {
  _FakeMCPResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MCPClientService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMCPClientService extends _i1.Mock implements _i3.MCPClientService {
  MockMCPClientService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i2.MCPServerStatus> get serverStatusStream => (super.noSuchMethod(
        Invocation.getter(#serverStatusStream),
        returnValue: _i4.Stream<_i2.MCPServerStatus>.empty(),
      ) as _i4.Stream<_i2.MCPServerStatus>);

  @override
  Map<String, _i2.MCPServerStatus> get serverStatuses => (super.noSuchMethod(
        Invocation.getter(#serverStatuses),
        returnValue: <String, _i2.MCPServerStatus>{},
      ) as Map<String, _i2.MCPServerStatus>);

  @override
  _i4.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.MCPResponse> sendRequest(_i2.MCPRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendRequest,
          [request],
        ),
        returnValue: _i4.Future<_i2.MCPResponse>.value(_FakeMCPResponse_0(
          this,
          Invocation.method(
            #sendRequest,
            [request],
          ),
        )),
      ) as _i4.Future<_i2.MCPResponse>);

  @override
  bool isServerConnected(String? serverId) => (super.noSuchMethod(
        Invocation.method(
          #isServerConnected,
          [serverId],
        ),
        returnValue: false,
      ) as bool);

  @override
  List<String> getConnectedServers() => (super.noSuchMethod(
        Invocation.method(
          #getConnectedServers,
          [],
        ),
        returnValue: <String>[],
      ) as List<String>);

  @override
  _i4.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
