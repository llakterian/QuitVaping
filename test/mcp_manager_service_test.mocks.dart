// Mocks generated by Mockito 5.4.4 from annotations
// in quit_vaping/test/mcp_manager_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:quit_vaping/data/models/mcp_cache_models.dart' as _i6;
import 'package:quit_vaping/data/models/mcp_error_models.dart' as _i7;
import 'package:quit_vaping/data/models/mcp_feedback_models.dart' as _i8;
import 'package:quit_vaping/data/models/mcp_model.dart' as _i5;
import 'package:quit_vaping/data/services/battery_optimization_service.dart' as _i3;
import 'package:quit_vaping/data/services/mcp_cache_service.dart' as _i9;
import 'package:quit_vaping/data/services/mcp_client_service.dart' as _i10;
import 'package:quit_vaping/data/services/mcp_error_handling_service.dart' as _i11;
import 'package:quit_vaping/data/services/mcp_user_feedback_service.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBatteryOptimizationStatus_0 extends _i1.SmartFake
    implements _i3.BatteryOptimizationStatus {
  _FakeBatteryOptimizationStatus_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStream_1<T> extends _i1.SmartFake implements _i4.Stream<T> {
  _FakeStream_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMCPResponse_2 extends _i1.SmartFake implements _i5.MCPResponse {
  _FakeMCPResponse_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMCPCacheStats_3 extends _i1.SmartFake implements _i6.MCPCacheStats {
  _FakeMCPCacheStats_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMCPSystemHealth_4 extends _i1.SmartFake implements _i8.MCPSystemHealth {
  _FakeMCPSystemHealth_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MCPUserFeedbackService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMCPUserFeedbackService extends _i1.Mock
    implements _i2.MCPUserFeedbackService {
  MockMCPUserFeedbackService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  Map<String, _i8.MCPServiceStatus> getCurrentStatuses() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCurrentStatuses,
          [],
        ),
        returnValue: <String, _i8.MCPServiceStatus>{},
      ) as Map<String, _i8.MCPServiceStatus>);

  @override
  _i8.MCPSystemHealth getSystemHealth() => (super.noSuchMethod(
        Invocation.method(
          #getSystemHealth,
          [],
        ),
        returnValue: _FakeMCPSystemHealth_4(
          this,
          Invocation.method(
            #getSystemHealth,
            [],
          ),
        ),
      ) as _i8.MCPSystemHealth);

  @override
  void updateServiceStatus(_i5.MCPServerStatus? status) => super.noSuchMethod(
        Invocation.method(
          #updateServiceStatus,
          [status],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateServiceDegradation(_i7.MCPServiceDegradation? degradation) =>
      super.noSuchMethod(
        Invocation.method(
          #updateServiceDegradation,
          [degradation],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void createSystemHealthFeedback() => super.noSuchMethod(
        Invocation.method(
          #createSystemHealthFeedback,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Stream<_i8.MCPUserFeedback> get userFeedbackStream => (super.noSuchMethod(
        Invocation.getter(#userFeedbackStream),
        returnValue: _FakeStream_1<_i8.MCPUserFeedback>(
          this,
          Invocation.getter(#userFeedbackStream),
        ),
      ) as _i4.Stream<_i8.MCPUserFeedback>);

  @override
  _i4.Stream<_i8.MCPServiceStatus> get serviceStatusStream => (super.noSuchMethod(
        Invocation.getter(#serviceStatusStream),
        returnValue: _FakeStream_1<_i8.MCPServiceStatus>(
          this,
          Invocation.getter(#serviceStatusStream),
        ),
      ) as _i4.Stream<_i8.MCPServiceStatus>);
}

/// A class which mocks [BatteryOptimizationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBatteryOptimizationService extends _i1.Mock
    implements _i3.BatteryOptimizationService {
  MockBatteryOptimizationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i3.BatteryOptimizationStatus getStatus() => (super.noSuchMethod(
        Invocation.method(
          #getStatus,
          [],
        ),
        returnValue: _FakeBatteryOptimizationStatus_0(
          this,
          Invocation.method(
            #getStatus,
            [],
          ),
        ),
      ) as _i3.BatteryOptimizationStatus);

  @override
  void updateSettings(_i3.BatteryOptimizationSettings? settings) =>
      super.noSuchMethod(
        Invocation.method(
          #updateSettings,
          [settings],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void forceLowPowerMode(bool? enabled) => super.noSuchMethod(
        Invocation.method(
          #forceLowPowerMode,
          [enabled],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool shouldThrottleBackgroundOperations() => (super.noSuchMethod(
        Invocation.method(
          #shouldThrottleBackgroundOperations,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  Duration getOptimizedTimeout() => (super.noSuchMethod(
        Invocation.method(
          #getOptimizedTimeout,
          [],
        ),
        returnValue: Duration(seconds: 30),
      ) as Duration);

  @override
  _i4.Stream<_i3.BatteryOptimizationEvent> get eventStream => (super.noSuchMethod(
        Invocation.getter(#eventStream),
        returnValue: _FakeStream_1<_i3.BatteryOptimizationEvent>(
          this,
          Invocation.getter(#eventStream),
        ),
      ) as _i4.Stream<_i3.BatteryOptimizationEvent>);
}

/// A class which mocks [MCPCacheService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMCPCacheService extends _i1.Mock implements _i9.MCPCacheService {
  MockMCPCacheService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  bool get isOnline => (super.noSuchMethod(
        Invocation.getter(#isOnline),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<_i5.MCPResponse?> getCachedResponse(String? key) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedResponse,
          [key],
        ),
        returnValue: _i4.Future<_i5.MCPResponse?>.value(),
      ) as _i4.Future<_i5.MCPResponse?>);

  @override
  _i4.Future<void> cacheResponse(
    String? key,
    _i5.MCPResponse? response,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheResponse,
          [
            key,
            response,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i5.MCPResponse?> getOfflineFallback(
    _i5.MCPResponseType? responseType,
    String? context,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOfflineFallback,
          [
            responseType,
            context,
          ],
        ),
        returnValue: _i4.Future<_i5.MCPResponse?>.value(),
      ) as _i4.Future<_i5.MCPResponse?>);

  @override
  _i4.Future<void> queueForSync(
    String? operation,
    Map<String, dynamic>? data,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #queueForSync,
          [
            operation,
            data,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i6.MCPCacheStats> getCacheStats() => (super.noSuchMethod(
        Invocation.method(
          #getCacheStats,
          [],
        ),
        returnValue: _i4.Future<_i6.MCPCacheStats>.value(_FakeMCPCacheStats_3(
          this,
          Invocation.method(
            #getCacheStats,
            [],
          ),
        )),
      ) as _i4.Future<_i6.MCPCacheStats>);

  @override
  _i4.Future<void> clearCache() => (super.noSuchMethod(
        Invocation.method(
          #clearCache,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Stream<bool> get connectivityStream => (super.noSuchMethod(
        Invocation.getter(#connectivityStream),
        returnValue: _FakeStream_1<bool>(
          this,
          Invocation.getter(#connectivityStream),
        ),
      ) as _i4.Stream<bool>);

  @override
  _i4.Stream<_i5.MCPResponse> get syncStream => (super.noSuchMethod(
        Invocation.getter(#syncStream),
        returnValue: _FakeStream_1<_i5.MCPResponse>(
          this,
          Invocation.getter(#syncStream),
        ),
      ) as _i4.Stream<_i5.MCPResponse>);
}

/// A class which mocks [MCPClientService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMCPClientService extends _i1.Mock implements _i10.MCPClientService {
  MockMCPClientService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i5.MCPResponse> sendRequest(_i5.MCPRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendRequest,
          [request],
        ),
        returnValue: _i4.Future<_i5.MCPResponse>.value(_FakeMCPResponse_2(
          this,
          Invocation.method(
            #sendRequest,
            [request],
          ),
        )),
      ) as _i4.Future<_i5.MCPResponse>);

  @override
  bool isServerConnected(String? serverId) => (super.noSuchMethod(
        Invocation.method(
          #isServerConnected,
          [serverId],
        ),
        returnValue: false,
      ) as bool);

  @override
  List<String> getConnectedServers() => (super.noSuchMethod(
        Invocation.method(
          #getConnectedServers,
          [],
        ),
        returnValue: <String>[],
      ) as List<String>);

  @override
  Map<String, _i5.MCPServerStatus> get serverStatuses => (super.noSuchMethod(
        Invocation.getter(#serverStatuses),
        returnValue: <String, _i5.MCPServerStatus>{},
      ) as Map<String, _i5.MCPServerStatus>);

  @override
  _i4.Stream<_i5.MCPServerStatus> get serverStatusStream => (super.noSuchMethod(
        Invocation.getter(#serverStatusStream),
        returnValue: _FakeStream_1<_i5.MCPServerStatus>(
          this,
          Invocation.getter(#serverStatusStream),
        ),
      ) as _i4.Stream<_i5.MCPServerStatus>);
}

/// A class which mocks [MCPErrorHandlingService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMCPErrorHandlingService extends _i1.Mock
    implements _i11.MCPErrorHandlingService {
  MockMCPErrorHandlingService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<T> executeWithRetry<T>(
    _i4.Future<T> Function()? operation, {
    required String? serverId,
    required String? operationName,
    Map<String, dynamic>? context,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #executeWithRetry,
          [operation],
          {
            #serverId: serverId,
            #operationName: operationName,
            #context: context,
          },
        ),
        returnValue: _i4.Future<T>.value(null as T),
      ) as _i4.Future<T>);

  @override
  void clearDegradation(String? serverId) => super.noSuchMethod(
        Invocation.method(
          #clearDegradation,
          [serverId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, _i7.MCPServiceDegradation> getCurrentDegradations() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCurrentDegradations,
          [],
        ),
        returnValue: <String, _i7.MCPServiceDegradation>{},
      ) as Map<String, _i7.MCPServiceDegradation>);

  @override
  _i4.Stream<_i7.MCPServiceDegradation> get degradationStream => (super.noSuchMethod(
        Invocation.getter(#degradationStream),
        returnValue: _FakeStream_1<_i7.MCPServiceDegradation>(
          this,
          Invocation.getter(#degradationStream),
        ),
      ) as _i4.Stream<_i7.MCPServiceDegradation>);
}